ext {
    sdkVersion = 30
    minSdkVersion = 21
    versionFile = 'version.properties'
}

buildscript {
    ext {
        nav_version = '2.3.0'
        core_version = '1.3.1'
        kotlin_version = '1.4.10'
        rxjava_version = '3.0.0'
        activity_version = '1.1.0'
        fragment_version = '1.2.5'
        appcompat_version = '1.2.0'
        lifecycle_version = '2.2.0'
        coroutines_version = '1.3.7'
        material_version = '1.3.0-alpha02'
    }

    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.1'
        classpath 'com.google.gms:google-services:4.3.3'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.5'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.3.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:$nav_version"
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven {
            url "https://dl.bintray.com/kunal26das/androidx.essentials/"
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

def getVersionCode(name) {
    def versionFile = file(this.ext.versionFile)
    def version = new Properties()
    version.load(new FileInputStream(versionFile))
    def versionMajor = Integer.valueOf(version["${name}.version.major"])
    def versionMinor = Integer.valueOf(version["${name}.version.minor"])
    def versionPatch = Integer.valueOf(version["${name}.version.patch"])
    return ((Integer.valueOf(this.ext.minSdkVersion) * 10000000) +
            (Integer.valueOf(versionMajor) * 10000) +
            (Integer.valueOf(versionMinor) * 100) +
            (Integer.valueOf(versionPatch) * 1))
}

def getVersionName(name) {
    def versionFile = file(this.ext.versionFile)
    def version = new Properties()
    version.load(new FileInputStream(versionFile))
    def versionMajor = Integer.valueOf(version["${name}.version.major"])
    def versionMinor = Integer.valueOf(version["${name}.version.minor"])
    def versionPatch = Integer.valueOf(version["${name}.version.patch"])
    return "${versionMajor}.${versionMinor}.${versionPatch}"
}

def getNextVersionName(name) {
    def versionFile = file(this.ext.versionFile)
    def version = new Properties()
    version.load(new FileInputStream(versionFile))
    def versionMajor = Integer.valueOf(version["${name}.version.major"])
    def versionMinor = Integer.valueOf(version["${name}.version.minor"])
    def versionPatch = Integer.valueOf(version["${name}.version.patch"])
    if (versionPatch < 9) {
        versionPatch += 1
    } else if (versionPatch == 9) {
        if (versionMinor < 9) {
            versionMinor += 1
            versionPatch = 0
        } else if (versionMinor == 9) {
            if (versionMajor < 99) {
                versionMajor += 1
                versionMinor = 0
                versionPatch = 0
            } else if (versionMajor == 99) {
                throw Exception("Version code limit reached")
            }
        }
    }
    version.setProperty(versionMajorKey, String.valueOf(versionMajor))
    version.setProperty(versionMinorKey, String.valueOf(versionMinor))
    version.setProperty(versionPatchKey, String.valueOf(versionPatch))
    version.store(versionFile.newWriter(), null)
    return "${versionMajor}.${versionMinor}.${versionPatch}"
}