ext {
    sdkVersion = 30
    minSdkVersion = 21
    versionFile = 'version.properties'
}

buildscript {
    ext {
        nav_version = '2.3.4'
        core_version = '1.3.2'
        koin_version = '2.1.5'
        rxjava_version = '3.0.0'
        kotlin_version = '1.4.31'
        activity_version = '1.2.1'
        fragment_version = '1.3.1'
        appcompat_version = '1.2.0'
        lifecycle_version = '2.3.0'
        coroutines_version = '1.4.2'
        material_version = '1.3.0'
    }

    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.2'
        classpath 'com.google.gms:google-services:4.3.5'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.5'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.5.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:$nav_version"
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven { url "https://dl.bintray.com/kunal26das/androidx.essentials/" }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

def getVersionCode(name) {
    def versionFile = file(this.ext.versionFile)
    def version = new Properties()
    version.load(new FileInputStream(versionFile))
    def versionMajor = Integer.valueOf(version["${name}.version.major"])
    def versionMinor = Integer.valueOf(version["${name}.version.minor"])
    def versionPatch = Integer.valueOf(version["${name}.version.patch"])
    return ((Integer.valueOf(this.ext.minSdkVersion) * 10000000) +
            (Integer.valueOf(versionMajor) * 10000) +
            (Integer.valueOf(versionMinor) * 100) +
            (Integer.valueOf(versionPatch) * 1))
}

def getVersionName(name) {
    def versionFile = file(this.ext.versionFile)
    def version = new Properties()
    version.load(new FileInputStream(versionFile))
    def versionMajor = Integer.valueOf(version["${name}.version.major"])
    def versionMinor = Integer.valueOf(version["${name}.version.minor"])
    def versionPatch = Integer.valueOf(version["${name}.version.patch"])
    return "${versionMajor}.${versionMinor}.${versionPatch}"
}